#+OPTIONS: toc:nil

* Command-Line Arguments
** Check for first argument using /strcmp/.
#+BEGIN_SRC C
 if (*++argv && !strcmp(*argv, "-n")) {
         ++argv;
         // Do something,  usually set a flag.
 }
 #+END_SRC

** Check for first argument pattern.
#+BEGIN_SRC C
if (argc > 1 && argv[1][0] == '-' && argv[1][1] ==  'n') {        
}

#+END_SRC

** Process optional arguments first
As seen in the original K&R, by convention optional arguments start with a minus sign. 
#+BEGIN_SRC C
while(--argc > 0 && (*++argv)[0] == '-') {
        // Process optional arguments
}
#+END_SRC

** Processing  arguments using /while/.
 #+BEGIN_SRC C
 while(*argv) {
        // Do something
        if (*++argv)
         // Do something, considering there are more arguments to be processed.
 }
 #+END_SRC

** Processing arguments using /for/.
#+BEGIN_SRC C

for(int i = 1; i < argc; i++) {
        // Do something using argv[i]
}

#+END_SRC

** Processing option arguments using getopt
Arguments are processed using while and switch. 
Most of the time argc and argv are the same arguments received by main.
optarg is the variable set to to the /value/ of the  option argument.
optind is the variable set to the /index/ of next non-option argument.

#+BEGIN_SRC C
while ((c = getopt (argc, argv, "f: :c")) != -1) { // Process option arguments
	switch (c) {
	case 't':
                foo(optarg)  // Do something, optarg is the value of the option.
		break;
	default:
	}
}
argc -= optind;   // update list of arguments so that regular arguments (non-option) can be processed as usual.
argv += optind;
#+END_SRC
